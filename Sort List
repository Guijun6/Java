Sort a linked list in O(n log n) time using constant space complexity.

Example 1:

Input: 4->2->1->3
Output: 1->2->3->4
Example 2:

Input: -1->5->3->4->0
Output: -1->0->3->4->5



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode merge(ListNode left, ListNode right) {
        ListNode newHead = new ListNode(-1);
        newHead.next = left;
        
        ListNode p = newHead;
        while (left != null && right != null) {
            if (left.val >= right.val) {
                ListNode pre = right;
                right = right.next;
                pre.next = p.next;
                p.next = pre;
                p = pre;
            } else {
                p = left;
                left = left.next;
            }
        }
        if (right != null) {
            p.next = right;
        }
        return newHead.next;
    }
    public ListNode sortList(ListNode head) {
        if (head == null || head.next == null) {
            return head;
        }
        ListNode fast = head;
        ListNode slow = head;
        while (slow != null && fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        ListNode rightHead = slow.next;
        ListNode leftHead = head;
        slow.next = null;

        leftHead = sortList(leftHead);
        rightHead = sortList(rightHead);
        return merge(leftHead, rightHead);
    }
}
