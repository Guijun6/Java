Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if (head == null || n <= 0) {
            return head;
        }
        int count = 0;
        for (ListNode tmp = head; tmp != null; tmp = tmp.next) {
            count++;
        }
        if (n > count) {
            return head;
        }
        int step = count - n;
        if (step == 0) {
            return head.next;
        }
        ListNode fast = head;
        ListNode prev = head;
        while (fast != null) {
            if (step == 0) {
                break;
            }
            prev = fast;
            fast = fast.next;
            step--;
        }
        prev.next = fast.next;
        return head;
    }
}
